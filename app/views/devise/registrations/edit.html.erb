<h2>Edit <%= resource_name.to_s.humanize %></h2>

<%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :first_name %><br />
    <%= f.text_field :first_name, autofocus: true, autocomplete: "first_name" %>
  </div>

  <div class="field">
    <%= f.label :last_name %><br />
    <%= f.text_field :last_name, autofocus: true, autocomplete: "last_name" %>
  </div>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
    <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
  <% end %>

  <div class="field">
    <%= f.label :password %> <i>(leave blank if you don't want to change it)</i><br />
    <%= f.password_field :password, autocomplete: "new-password" %>
    <% if @minimum_password_length %>
      <br />
      <em><%= @minimum_password_length %> characters minimum</em>
    <% end %>
  </div>

  <div class="field">
    <%= f.label :password_confirmation %><br />
    <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
  </div>

  <div class="field">
    <%= f.label :current_password %> <i>(we need your current password to confirm your changes)</i><br />
    <%= f.password_field :current_password, autocomplete: "current-password" %>
  </div>

<%# <script>
  document.addEventListener("DOMContentLoaded", function() {
    document.getElementById('add-competency').addEventListener('click', function(e) {
      e.preventDefault();
      var template = document.getElementById('new-competency-template').innerHTML;
      var container = document.getElementById('competencies');
      var newId = new Date().getTime();
      template = template.replace(/new_competencies/g, newId);
      container.insertAdjacentHTML('beforeend', template);
      attachRemoveEvent();
    });

    function attachRemoveEvent() {
      var removeButtons = document.querySelectorAll('.remove-competency');
      removeButtons.forEach(function(button) {
        button.removeEventListener('click', removeCompetency);
        button.addEventListener('click', removeCompetency);
      });
  }

    function removeCompetency(e) {
      e.preventDefault();
      this.closest('.competency-fields').remove();
    }

    attachRemoveEvent();
  });
</script> %>

  <div class="actions">
    <%= f.submit "Update" %>
  </div>
<% end %>

<h3>Cancel my account</h3>

<div>Unhappy? <%= button_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?", turbo_confirm: "Are you sure?" }, method: :delete %></div>

<%= link_to "Back", :back %>


<%# <div id="new-competency-template" style="display: none;">
  <div class="competency-fields">
    <label for="user_competencies_attributes_new_competencies_name">Competency</label>
    <select name="user[competencies_attributes][new_competencies][name]" id="user_competencies_attributes_new_competencies_name">
      <option value="">Please select</option>
      <option value="coss">coss</option>
      <option value="supervisor">supervisor</option>
      <option value="360 operator">360 operator</option>
      <option value="ground worker">ground worker</option>
      <option value="telehandler driver">telehandler driver</option>
      <option value="Engineer">Engineer</option>
      <option value="steel fixer">steel fixer</option>
      <option value="carpenter">carpenter</option>
      <option value="electrician">electrician</option>
    </select>
    <label for="user_competencies_attributes_new_competencies_expiration_date">Expiration Date</label>
    <input type="date" name="user[competencies_attributes][new_competencies][expiration_date]" id="user_competencies_attributes_new_competencies_expiration_date">
      <label for="user_competencies_attributes_new_competencies_photo">Photo</label>
      <input type="file" name="user[competencies_attributes][new_competencies][photo]" id="user_competencies_attributes_new_competencies_photo">
      <button type="button" class="remove-competency btn btn-danger">Remove</button>
    </div>
  </div>
</div> %>

<%# <script>
  document.addEventListener("DOMContentLoaded", function() {
  var competencyContainer = document.getElementById('competencies-container');
  var template = document.getElementById('new-competency-template');
  var index = 0;

  // Function to add a new competency field
  function addCompetency() {
    index++;
    var newField = template.cloneNode(true); // Clone the template
    newField.style.display = 'block'; // Make it visible
    newField.classList.remove('hidden'); // Ensure it doesn't have the hidden class
    newField.querySelector('select').name = `user[competencies_attributes][${index}][name]`;
    newField.querySelector('input[type="date"]').name = `user[competencies_attributes][${index}][expiration_date]`;
    newField.querySelector('input[type="file"]').name = `user[competencies_attributes][${index}][photo]`;
    newField.querySelector('.remove-competency').setAttribute('data-index', index); // Set a unique index

    // Append the new field to the container
    competencyContainer.insertBefore(newField, document.getElementById('add-competency'));
  }

  // Event listener for adding new competencies
  document.getElementById('add-competency').addEventListener('click', addCompetency);

  // Event delegation for removing competency fields
  competencyContainer.addEventListener('click', function(event) {
    if (event.target && event.target.matches('.remove-competency')) {
      var field = event.target.closest('.competency-fields');
      field.parentNode.removeChild(field); // Remove the field from the DOM
    }
  });
  });

</script> %>
